# -*- python -*-
import distroconf
import os
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData']=None

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.plugins import worker
c['workers'] = [
    worker.Worker("pkgbuilderbot", "pkgbuilderbot"),
    worker.Worker("gensysbot", "gensysbot")
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {"pb": {"port": 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []



for app in distroconf.apps_gecos:
    c['change_source'].append(GitPoller(
        "https://github.com/gecos-team/" + app +".git",
        workdir=app+'-workdir', branch='focal', project=app+"-Pr",
        pollinterval=distroconf.polling_time))


for pkg in distroconf.metapkgs_gecos:
    c['change_source'].append(GitPoller(
        "https://github.com/gecos-team/" + pkg +".git",
        workdir=pkg+'-workdir', branch='focal', project=pkg+"-Pr",
        pollinterval=distroconf.polling_time))


for app in distroconf.apps:
    c['change_source'].append(GitPoller(
        "https://github.com/gecos-team/" + app +".git",
        workdir=app+'-workdir', branch='focal', project=app+"-Pr",
        pollinterval=distroconf.polling_time))


for pkg in distroconf.metapkgs:
    c['change_source'].append(GitPoller(
        "https://github.com/gecos-team/" + pkg +".git",
        workdir=pkg+'-workdir', branch='focal', project=pkg+"-Pr",
        pollinterval=distroconf.polling_time))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build



from buildbot.schedulers import timed
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
from buildbot.steps.transfer import FileUpload
from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.plugins import steps
from custombuildsteps import PBuildPkg, RemoveGIT, GCSBuild
#from custombuildsteps import FreightAddGuadaTrusty, FreightCacheGuadaTrusty, SetRepoPermsGuadaTrusty, SetGitRevGuadaTrusty
#from custombuildsteps import FreightAddGecos, FreightCacheGecos, SetRepoPermsGecos,SetGitRevGecos
from custombuildsteps import FreightAddGecos, FreightCacheGecos, SetRepoPermsGecos,SetGitRevGecos, PBuildPkg
#from custombuildsteps import SetGitRevGecosDev
from custombuildsteps import RemoveDebs
from custombuildsteps import LiveBuildGecos,LiveBuildGecosLite
from custombuildsteps import SetBinaryPermsGecos,SetBinaryPermsGecosLite
from custombuildsteps import AppImageBuilder
from buildbot.plugins import util




c['schedulers'] = []
c['builders'] = []

gensys_gecos_hour, gensys_gecos_minute = distroconf.gensys_gecos_time.split(':')
gensys_gecos_lite_hour, gensys_gecos_lite_minute = distroconf.gensys_gecos_lite_time.split(':')

c['schedulers'].append(timed.Nightly(name="gensys_gecosSched", branch='',builderNames=["gensys_gecos"], hour=int(gensys_gecos_hour), minute=int(gensys_gecos_minute)))
#c['schedulers'].append(timed.Nightly(name="gensys_gecos_liteSched", branch='',builderNames=["gensys_gecos_lite"], hour=int(gensys_gecos_lite_hour), minute=int(gensys_gecos_lite_minute)))



gensysfactory_gecos = BuildFactory()
gensysfactory_gecos.addStep(LiveBuildGecos(haltOnFailure=True, timeout=40*60))
gensysfactory_gecos.addStep(SetBinaryPermsGecos(haltOnFailure=True))
gensysfactory_gecos.addStep(FileUpload(workersrc=distroconf.rawimage_gecos,masterdest=distroconf.ftpimage_gecos))

genisobuilder_gecos = {'name': 'gensys_gecos', 
        'workername': 'gensysbot',
        'builddir': 'gensys_gecos',
        'factory': gensysfactory_gecos,
}
c['builders'].append(genisobuilder_gecos)


c['schedulers'].append(ForceScheduler(
                               name="gensys_gecosForced",
                               builderNames=["gensys_gecos"]))



#gensysfactory_gecos_lite = BuildFactory()
#gensysfactory_gecos_lite.addStep(LiveBuildGecosLite(haltOnFailure=True, timeout=40*60))
#gensysfactory_gecos_lite.addStep(SetBinaryPermsGecosLite(haltOnFailure=True))
#gensysfactory_gecos_lite.addStep(FileUpload(workercs=distroconf.rawimage_gecos_lite, masterdest=distroconf.ftpimage_gecos_lite, mode=0644))

#genisobuilder_gecos_lite = {'name': 'gensys_gecos_lite', 
#        'slavename': 'gensysbot',
#        'builddir': 'gensys_gecos_lite',
#        'factory': gensysfactory_gecos_lite,
#}
#c['builders'].append(genisobuilder_gecos_lite)

#c['schedulers'].append(ForceScheduler(
#                               name="gensys_gecos_liteForced",
#                               builderNames=["gensys_gecos_lite"]))






for app in distroconf.apps_gecos:
    c['schedulers'].append(SingleBranchScheduler(
                               name=app+"SchedFocal",
                               change_filter=filter.ChangeFilter(project=app+"-Pr",branch='focal'),
                               treeStableTimer=10,
                               builderNames=[app+"-focal"]))


    c['schedulers'].append(ForceScheduler(
                               name=app+"ForceFocal",
                               builderNames=[app+"-focal"]))


    appfactory = BuildFactory()
    appfactory.addStep(steps.Git(repourl='https://github.com/gecos-team/'+app+'.git',branch='focal', mode='incremental'))
    appfactory.addStep(RemoveGIT(haltOnFailure=True))
    appfactory.addStep(PBuildPkg(haltOnFailure=True))
    appfactory.addStep(FreightAddGecos(haltOnFailure=True))
    appfactory.addStep(RemoveDebs(haltOnFailure=True))
    appfactory.addStep(FreightCacheGecos(haltOnFailure=True))
    appfactory.addStep(SetRepoPermsGecos(haltOnFailure=True))

    appbuilder = {'name': app+'-focal',
              'workername': 'pkgbuilderbot',
              'builddir': app+'-focal',
              'factory': appfactory,
    }

    c['builders'].append(appbuilder)



for pkg in distroconf.metapkgs_gecos:


    c['schedulers'].append(SingleBranchScheduler(
                               name=str(pkg+"SchedFocal"),
                               change_filter=filter.ChangeFilter(project=pkg+"-Pr",branch='focal'),
                               treeStableTimer=10,
                               builderNames=[pkg+"-focal"]))


    pkgfactory = BuildFactory()
    pkgfactory.addStep(steps.Git(repourl='https://github.com/gecos-team/'+pkg+'.git', branch='focal', mode='incremental'))
    pkgfactory.addStep(RemoveGIT(haltOnFailure=True))
    pkgfactory.addStep(SetGitRevGecos(haltOnFailure=True))
    pkgfactory.addStep(GCSBuild(haltOnFailure=True))
    pkgfactory.addStep(FreightAddGecos(haltOnFailure=True))
    pkgfactory.addStep(RemoveDebs(haltOnFailure=True))
    pkgfactory.addStep(FreightCacheGecos(haltOnFailure=True))
    pkgfactory.addStep(SetRepoPermsGecos(haltOnFailure=True))

    pkgbuilder = {'name': str(pkg+"-focal"),
              'workername': 'pkgbuilderbot',
              'builddir': pkg+"-focal",
              'factory': pkgfactory,
    }

    c['builders'].append(pkgbuilder)

#alfem add
    c['schedulers'].append(ForceScheduler(
                               name=str(pkg+"ForceFocal"),
                               builderNames=[pkg+"-focal"],
                               codebases=[
                                 util.CodebaseParameter(
                                   "",
                                   label="Main repository",
                                   branch=util.FixedParameter(name="branch", default="focal"),
                                   revision=util.FixedParameter(name="revision", default=""),
                                   repository=util.FixedParameter(name="repository", default=""),
                                   project=util.FixedParameter(name="project", default=""),
                                 ),
                              ]
                           ))



for app in distroconf.apps:

    appfactory = BuildFactory()
    appfactory.addStep(steps.Git(repourl='https://github.com/gecos-team/'+app+'.git', branch='focal', mode='incremental'))
    appfactory.addStep(RemoveGIT(haltOnFailure=True))
    appfactory.addStep(PBuildPkg(haltOnFailure=True))
    appfactory.addStep(FreightAddGecos(haltOnFailure=True))
    appfactory.addStep(FreightCacheGecos(haltOnFailure=True))
    appfactory.addStep(SetRepoPermsGecos(haltOnFailure=True))
    appfactory.addStep(RemoveDebs(haltOnFailure=True))

    appbuilder = {'name': app+'-focal',
              'workername': 'pkgbuilderbot',
              'builddir': app+'-focal',
              'factory': appfactory,
    }

    c['builders'].append(appbuilder)


for app in distroconf.appimgs.keys():

    appfactory = BuildFactory()
    appfactory.addStep(steps.Git(repourl='https://github.com/gecos-team/'+app+'.git', branch='appimage', mode='incremental'))
    appfactory.addStep(RemoveGIT(haltOnFailure=True))
    appfactory.addStep(AppImageBuilder(haltOnFailure=True))
    appfactory.addStep(FileUpload(workersrc=distroconf.appimgs[app], masterdest=os.path.join(distroconf.ftpimage_appimgs, distroconf.appimgs[app])))

    appbuilder = {'name': app+'-appimage',
              'workername': 'pkgbuilderbot',
              'builddir': app+'-appimage',
              'factory': appfactory,
    }

    c['builders'].append(appbuilder)

    c['schedulers'].append(SingleBranchScheduler(
                               name=app+"SchedAppImage",
                               change_filter=filter.ChangeFilter(project=app+"-Pr",branch='appimage'),
                               treeStableTimer=10,
                               builderNames=[app+"-appimage"]))

    c['schedulers'].append(ForceScheduler(
                               name=app+"ForceAppImage",
                               builderNames=[app+"-appimage"]))


for pkg in distroconf.metapkgs:

    c['schedulers'].append(SingleBranchScheduler(
                               name=pkg+"SchedFocal",
                               change_filter=filter.ChangeFilter(project=pkg+"-Pr",branch='focal'),
                               treeStableTimer=10,
                               builderNames=[pkg+"-focal"]))

    c['schedulers'].append(ForceScheduler(
                               name=pkg+"ForceFocal",
                               builderNames=[pkg+"-focal"]))


    pkgfactory = BuildFactory()

    pkgfactory.addStep(steps.Git(repourl='https://github.com/gecos-team/'+pkg+'.git', branch='focal',mode='incremental'))

    pkgfactory.addStep(RemoveGIT(haltOnFailure=True))
    pkgfactory.addStep(SetGitRevGecos(haltOnFailure=True))
    pkgfactory.addStep(GCSBuild(haltOnFailure=True))
    pkgfactory.addStep(FreightAddGecos(haltOnFailure=True))
    pkgfactory.addStep(FreightCacheGecos(haltOnFailure=True))
    pkgfactory.addStep(SetRepoPermsGecos(haltOnFailure=True))
    pkgfactory.addStep(RemoveDebs(haltOnFailure=True))


    pkgbuilder = {'name': pkg+"-focal",
              'workername': 'pkgbuilderbot',
              'builddir': pkg+"-focal",
              'factory': pkgfactory,
    }

    c['builders'].append(pkgbuilder)


    
#c['schedulers'].append(SingleBranchScheduler(
#                            name="all",
#                            change_filter=filter.ChangeFilter(branch='master'),
#                            treeStableTimer=None,
#                            builderNames=["runtests"]))
#c['schedulers'].append(ForceScheduler(
#                            name="force",
#                            builderNames=["runtests"]))
#
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.


#c['builders'].append(
#    BuilderConfig(name="runtests",
#      workernames=["gensysbot"],
#      factory=factory))
#
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

#c['status'] = []

#from buildbot.status import html
#from buildbot.status.web import authz, auth

#authz_cfg=authz.Authz(
#    # change any of these to True to enable; see the manual for more
#    # options
#    auth=auth.BasicAuth([("GECOS","GECOS")]),
#    gracefulShutdown = auth,
#    forceBuild = True, # use this to test your slave once it is set up
#    forceAllBuilds = True,
#    pingBuilder = True,
#    stopBuild = True,
#    stopAllBuilds = True,
#    cancelPendingBuild = True,
#)
#c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={},console_view={},grid_view={}))


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "GECOS V5"
c['titleURL'] = "https://github.com/gecos-team"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://10.240.243.103/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
from buildbot.process.users import manual
c['user_managers'] = []
c['user_managers'].append(manual.CommandlineUserManager(username="user",
                                                   passwd="userpw",
                                                   port=9990))

